using System;
using System.Collections.Generic;
namespace AAARandomDungeonGenerator
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Hello there, and welcome to the Sciamachy Dungeon Diagram Generator!");
            Console.WriteLine("Let's start with the average level of your players' personae.");
            Console.WriteLine("Go ahead and enter the average level of the party as a number and \npress enter. Decimal format, please!");
            int rndCharLevel = AvgChar();
            Console.WriteLine("Alright, thanks for that.");
            Console.WriteLine("Now, on a scale of 1 to 10, how long do you want this to be? Just enter a number.");
            Console.WriteLine("We're talking about 1 is a breeze for that level, but 10 is a ridiculous marathon.");
            int dgnSize = DgnSz(rndCharLevel);
            Console.WriteLine("Dearly noted.");
            Console.WriteLine("What's involved in this dungeon? You've got the options of including \npuzzles, encounters, and hazards.");
            Console.WriteLine("If you want any combination of the three, list the components out seperated \nby commas. For example, if you want puzzles and hazards, enter \"puzzles, hazards\"");
            Console.WriteLine("To include all three components, enter \"balanced\" ");
        Tag1:
            string compList = Console.ReadLine();
            compList.ToLower();
            int hzd = CmpList1(compList);
            if (hzd == 2)
            {
                goto Tag1;
            }
            bool hzdRef = RefList1(hzd);
            int pzl = CmpList2(compList);
            if (pzl == 2)
            {
                goto Tag1;
            }
            bool pzlRef = RefList2(pzl);
            int ect = CmpList3(compList);
            if (ect == 2)
            {
                goto Tag1;
            }
            bool ectRef = RefList3(ect);
            if (ectRef == true)
            {
                goto Tag2;
            }
            else
            {
                goto Tag3;
            }
        Tag2:
            int ectType = EctGen();
        Tag3:
            Console.WriteLine("Determining verticality...");
            int lineNum = LineGen(dgnSize);
            Console.WriteLine("LineNum Complete");
            int[] takenLines = new int[lineNum+1];
            Console.WriteLine("TakenLines Complete");
            int obstRem = dgnSize - lineNum;
            int runID = 0;
            List<int[]> subTasks = new List<int[]>();
            while (obstRem > 0)
            {
                int aLine = LineSelector(lineNum, takenLines, runID);
                int aSize = SubTaskGen(obstRem);
                obstRem = obstRem - aSize;
                int[] standIn = new int[] { aLine, aSize };
                subTasks.Add(standIn);
                runID++;
            }
            Console.WriteLine("Determining width...");
            obstRem = dgnSize;
            int i = 0;
            int[] takenSubTasks = new int[obstRem];
            List<int[]> thirdTasks = new List<int[]>();
            while (obstRem > 0)
            {
                int aLine = ThirdSelector(runID, takenSubTasks, i);
                if (aLine == 6000)
                {
                    goto TagE;
                }
                int targetSubSize = SubSizeGen(aLine, subTasks);
                int aSubTask = SubTaskSelector(targetSubSize);
                int aSize = ThirdTaskGen(obstRem);
                obstRem = obstRem - aSize;
                int[] thirdArray = new int[] { aLine, aSubTask, aSize };
                thirdTasks.Add(thirdArray);
                i++;
            }
        TagE:
            Console.WriteLine("Generating basic template...");
            int[] widthFinder = new int[lineNum + 1];
            int widthIter = lineNum;
            int maxWidth = MaxWidthHandler(subTasks, widthIter, widthFinder);
            int[,] basicTemplate = new int[lineNum, maxWidth];
            foreach (var subtask in subTasks)
            {
                Console.WriteLine("Check");
                basicTemplate[subtask[0], 0] = subtask[1];
            }
            foreach (var thirdtask in thirdTasks)
            {
                Console.WriteLine("Affirmative");
                basicTemplate[thirdtask[0], thirdtask[1]] = thirdtask[2];
            }
            int[,] adjTemplate = MainLineHandler(basicTemplate, lineNum);
            int[,] finalTemplate = SubLineHandler(adjTemplate, lineNum, maxWidth);
        }
        static Int32 AvgChar()
        {
        TagA:
            try
            {
                string avgCharLevel = Console.ReadLine();
                decimal num = Convert.ToDecimal(avgCharLevel);
                Math.Round(num);
                int rndCharLevel = Convert.ToInt32(num);
                return rndCharLevel;
            }
            catch (Exception)
            {
                Console.WriteLine("Your choice is incorrectly formatted. Ensure\nthat you are entering a number");
                goto TagA;
            }

        }
        static int DgnSz(int rndCharLevel)
        {
        TagB:
            try
            {
                string temp = Console.ReadLine();
                int dgnScale = Convert.ToInt32(temp);
                int dgnSize = (dgnScale * rndCharLevel);
                return dgnSize;
            }
            catch (Exception)
            {
                Console.WriteLine("Your choice is incorrectly formatted. Ensure\nthat you are entering a number");
                goto TagB;
            }

        }
        static int CmpList1(string compList)
        {
            switch (compList)
            {
                case "hazards":
                    {
                        int hzd = 1;
                        return hzd;
                    }
                case "puzzles":
                    {
                        int hzd = 0;
                        return hzd;
                    }
                case "encounters":
                    {
                        int hzd = 0;
                        return hzd;
                    }
                case "puzzles, encounters":
                    {
                        int hzd = 0;
                        return hzd;
                    }
                case "encounters, puzzles":
                    {
                        int hzd = 0;
                        return hzd;
                    }
                case "encounters, hazards":
                    {
                        int hzd = 1;
                        return hzd;
                    }
                case "hazards, encounters":
                    {
                        int hzd = 1;
                        return hzd;
                    }
                case "hazards, puzzles":
                    {
                        int hzd = 1;
                        return hzd;
                    }
                case "puzzles, hazards":
                    {
                        int hzd = 1;
                        return hzd;
                    }
                case "balanced":
                    {
                        int hzd = 1;
                        return hzd;
                    }
                default:
                    Console.WriteLine("Your choice is incorrectly formatted. Please check spelling and make sure to use \n\"balanced\" if you're selecting all three options instead of listing them out.");
                    int errorOccured = 2;
                    return errorOccured;
            }

        }
        static bool RefList1(int hzd)
        {
            switch (hzd)
            {
                case 0:
                    {
                        bool refHzd = false;
                        return refHzd;
                    }
                case 1:
                    {
                        bool refHzd = true;
                        return refHzd;
                    }
                default:
                    {
                        bool refHzd = false;
                        return refHzd;
                    }
            }
        }
        static int CmpList2(string compList)
        {
            switch (compList)
            {
                case "hazards":
                    {
                        int pzl = 0;
                        return pzl;
                    }
                case "puzzles":
                    {
                        int pzl = 1;
                        return pzl;
                    }
                case "encounters":
                    {
                        int pzl = 0;
                        return pzl;
                    }
                case "puzzles, encounters":
                    {
                        int pzl = 1;
                        return pzl;
                    }
                case "encounters, puzzles":
                    {
                        int pzl = 1;
                        return pzl;
                    }
                case "encounters, hazards":
                    {
                        int pzl = 0;
                        return pzl;
                    }
                case "hazards, encounters":
                    {
                        int pzl = 0;
                        return pzl;
                    }
                case "hazards, puzzles":
                    {
                        int pzl = 1;
                        return pzl;
                    }
                case "puzzles, hazards":
                    {
                        int pzl = 1;
                        return pzl;
                    }
                case "balanced":
                    {
                        int pzl = 1;
                        return pzl;
                    }
                default:
                    Console.WriteLine("Your choice is incorrectly formatted. Please check spelling and make sure to use \n\"balanced\" if you're selecting all three options instead of listing them out..");
                    int errorOccured = 2;
                    return errorOccured;
            }

        }
        static bool RefList2(int pzl)
        {
            switch (pzl)
            {
                case 0:
                    {
                        bool refPzl = false;
                        return refPzl;
                    }
                case 1:
                    {
                        bool refPzl = true;
                        return refPzl;
                    }
                default:
                    {
                        bool refPzl = false;
                        return refPzl;
                    }
            }
        }
        static int CmpList3(string compList)
        {
            switch (compList)
            {
                case "hazards":
                    {
                        int ect = 0;
                        return ect;
                    }
                case "puzzles":
                    {
                        int ect = 0;
                        return ect;
                    }
                case "encounters":
                    {
                        int ect = 1;
                        return ect;
                    }
                case "puzzles, encounters":
                    {
                        int ect = 1;
                        return ect;
                    }
                case "encounters, puzzles":
                    {
                        int ect = 1;
                        return ect;
                    }
                case "encounters, hazards":
                    {
                        int ect = 1;
                        return ect;
                    }
                case "hazards, encounters":
                    {
                        int ect = 1;
                        return ect;
                    }
                case "hazards, puzzles":
                    {
                        int ect = 0;
                        return ect;
                    }
                case "puzzles, hazards":
                    {
                        int ect = 0;
                        return ect;
                    }
                case "balanced":
                    {
                        int ect = 1;
                        return ect;
                    }
                default:
                    Console.WriteLine("Your choice is incorrectly formatted. Please check spelling and make sure to use \n\"balanced\" if you're selecting all three options instead of listing them out.");
                    int errorOccured = 2;
                    return errorOccured;
            }

        }
        static bool RefList3(int ect)
        {
            switch (ect)
            {
                case 0:
                    {
                        bool refEct = false;
                        return refEct;
                    }
                case 1:
                    {
                        bool refEct = true;
                        return refEct;
                    }
                default:
                    {
                        bool refEct = false;
                        return refEct;
                    }
            }
        }
        static int EctGen()
        {
            Console.WriteLine("Very good.");
            Console.WriteLine("Would you prefer this dungeon to involve\ncombat or confrontations?");
        TagEnc:
            Console.WriteLine("Enter \"combat\", \"confrontation\", or \"both\".");
            string ectType = Console.ReadLine();
            ectType.ToLower();
            switch (ectType)
            {
                case "combat":
                    {
                        int isCom = 1;
                        return isCom;
                    }
                case "confrontation":
                    {
                        int isCom = 0;
                        return isCom;
                    }
                case "both":
                    {
                        int isCom = 2;
                        return isCom;
                    }
                default:
                    {
                        Console.WriteLine("Your choice is incorrectly formatted. Please check spelling and make sure to use \n\"both\" if you're selecting both options instead of listing them out.");
                        goto TagEnc;
                    }
            }
        }
        static int LineGen(int dgnSize)
        {
            Random lineNumber = new Random();
            int lineNum = lineNumber.Next(1, dgnSize);
            return lineNum;
        }
        static int LineSelector(int lineNum, int[] takenLines, int runID)
        {
        TagC:
            Random lineNumbSelect = new Random();
            int aLine = lineNumbSelect.Next(0, lineNum);
            foreach (int takenLine in takenLines)
            {
                Console.WriteLine("Check Complete");
                if (takenLine == aLine)
                {
                    if (takenLine == 0)
                    {
                        goto TagD;
                    }
                    goto TagC;
                }
            }
            TagD:
            takenLines[runID] = aLine;
            return aLine;
        }
        static int SubTaskGen(int obstRem)
        {
            Random subTaskSize = new Random();
            int aSize = subTaskSize.Next(0, obstRem + 1);
            return aSize;
        }
        static int ThirdSelector(int runID, int[] takenSubTasks, int i)
        {
            int iter = 0;
        TagD:
            Random thirdTaskSize = new Random();
            int aLine = thirdTaskSize.Next(0, runID + 1);
            foreach (int takenLine in takenSubTasks)
            {
                if (takenLine == aLine)
                {
                    iter = iter + 1;
                    goto TagD;
                }
                else if (iter > 50000)
                {
                    return 6000;
                }
            }
            takenSubTasks[i] = aLine;
            return aLine;
        }
        static int SubSizeGen(int aLine, List<int[]> subTasks)
        {
            foreach (var sizetask in subTasks)
            {
                if (sizetask[1] == aLine)
                {
                    int targetSubSize = sizetask[0];
                    return targetSubSize;
                }
            }
            return 0;
        }
        static int SubTaskSelector(int targetSubSize)
        {
            Random subTaskPlacement = new Random();
            int aSubTask = subTaskPlacement.Next(1, targetSubSize + 1);
            return aSubTask;
        }
        static int ThirdTaskGen(int obstRem)
        {
            Random thirdTaskSize = new Random();
            int aSize = thirdTaskSize.Next(0, obstRem + 1);
            return aSize;
        }
        static int MaxWidthHandler(List<int[]> subTasks, int widthIter, int[] widthFinder)
        {
            subTasks.ForEach(delegate (int[] subTask)
            {
                while (widthIter >= 0)
                {
                    widthFinder[widthIter] = subTask[0];
                    widthIter = widthIter - 1;
                }
            });
            Array.Sort(widthFinder);
            Array.Reverse(widthFinder);
            int widthVar = widthFinder[0];
            return widthVar;
        }
        static int[,] MainLineHandler(int[,] basicTemplate, int lineNum)
        {
            for(int x = 0; x < lineNum+1; x++)
            {
                if (basicTemplate[x-1,0] == 0)
                {
                    basicTemplate[x-1, 0] = 0;
                }
            }
            return basicTemplate;
        }
        static int[,] SubLineHandler(int[,] adjTemplate, int lineNum, int maxWidth)
        {
            for (int y = 0; y < lineNum+1; y++)
            {
                Tag:
                int[] tempArr = new int[maxWidth];
                for (int x = 0; x < maxWidth+1; x++)
                {
                    tempArr[x] = adjTemplate[y-1, x-1];
                }
                int zeroIndex = FinalZero(tempArr, maxWidth);
                foreach (int z in adjTemplate)
                {
                    if (z > zeroIndex)
                    {
                        y = y + 1;
                        goto Tag;
                    }
                    else if (adjTemplate[y-1,z-1] == 0)
                    {
                        adjTemplate[y-1,z-1] = 1;
                    }
                }
            }
            return adjTemplate;
        }
        static int FinalZero(int[] tempArr,int maxWidth)
        {
            for (int i = tempArr.Length; i > 0; i--)
            {
                if (i == 0)
                {
                    continue;
                }
                return i;
            }
            return maxWidth;
        }
    }
}
